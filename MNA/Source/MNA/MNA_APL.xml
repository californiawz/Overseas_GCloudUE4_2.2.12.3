<?xml version="1.0" encoding="utf-8"?>
<root xmlns:android="http://schemas.android.com/apk/res/android">
  <init>
    <log text="Init..." />
  </init>
  <!--拷贝文件或目录到Intermediate/Android/APK -->
  <resourceCopies>
    <log text="Copy libs begin..." />
    <copyFile src="$S(PluginDir)/MNA/Android/MNA_ANDROID.jar" dst="$S(BuildDir)/libs/MNA_ANDROID.jar"/>
    <copyFile src="$S(PluginDir)/MNA/Android/$S(Architecture)/libgsdk.so" dst="$S(BuildDir)/libs/$S(Architecture)/libgsdk.so"/>
    <log text="Copy libs end..." />
  </resourceCopies>

  <androidManifestUpdates>
    <log text="androidManifestUpdates begin..." />
    <!--运行时权限-->
    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
    <!--普通权限-->
    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
    <uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />
    <uses-permission android:name="android.permission.CHANGE_NETWORK_STATE" />
    <uses-permission android:name="android.permission.CHANGE_WIFI_MULTICAST_STATE" />
    <log text="androidManifestUpdates end..." />
  </androidManifestUpdates>

  <gameActivityImportAdditions>
    <insert>
import com.cmocmna.sdk.MNAPlatform;
    </insert>
  </gameActivityImportAdditions>
  <gameActivityClassAdditions>
    <insert>
      static {
      try {
        System.loadLibrary("gsdk");
      } catch (Throwable ignore) {
      }
      }

      public void MNA_SetControlDomain(final String controlDomain, final int controlPort) {
      MNAPlatform.MNASetControlDomain(controlDomain, controlPort);
      }

      public void MNA_Init(final String qqappid, final boolean debug, final int zoneid,
      final boolean isReleaseEnv, final boolean useBatteryNotify,
      final int reportChannelType, final String tCloudKey) {
      runOnUiThread(new Runnable() {
      @Override
      public void run() {
      MNAPlatform.MNAInit(GameActivity.this, qqappid, debug, zoneid, isReleaseEnv, useBatteryNotify, reportChannelType, tCloudKey);
      }
      });
      }

      public void MNA_SetBridge(long bridge) {
      MNAPlatform.MNASetBridge(bridge);
      }

      public void MNA_SetUserName(int userType, String openid) {
      MNAPlatform.MNASetUserName(userType, openid);
      }

      public void MNA_SetUserName(int userType, String openid, String userId, String worldId) {
      MNAPlatform.MNASetUserName(userType, openid, userId, worldId);
      }

      public void MNA_SetZoneId(int zoneid) {
      MNAPlatform.MNASetZoneId(zoneid);
      }

      public void MNA_StartSpeed(String domain, int vport,
      int htype, String hookModules, int zoneid, int stopMNA, int start_timeout, String pvpid) {
      MNAPlatform.MNAStartSpeed(domain, vport, htype, hookModules, zoneid, stopMNA, start_timeout, pvpid);
      }

      public void MNA_SetGameIp(String gameIp){
      MNAPlatform.MNASetGameIp(gameIp);
      }

      public void MNA_StopMNA(String domain, int vport) {
      MNAPlatform.MNAStopMNA(domain, vport);
      }

      public void MNA_EndSpeed(String domain, int vport) {
      MNAPlatform.MNAEndSpeed(domain, vport);
      }

      public void MNA_EndSpeed(String domain, int vport, String extrainfo) {
      MNAPlatform.MNAEndSpeed(domain, vport, extrainfo);
      }

      public void MNA_EndSpeed(String domain, int vport, String extrainfo, int gameWin) {
      MNAPlatform.MNAEndSpeed(domain, vport, extrainfo, gameWin);
      }

      public int MNA_IsQOSWork() {
      return MNAPlatform.MNAIsQOSWork();
      }

      public void MNA_GoBack() {
      MNAPlatform.MNAGoBack();
      }

      public void MNA_GoFront() {
      MNAPlatform.MNAGoFront();
      }

      public void MNA_SetObserver(long startSpeedPtr, long kartinPtr) {
      MNAPlatform.MNASetObserver(startSpeedPtr, kartinPtr);
      }

      public void MNA_AddData(String fps) {
      MNAPlatform.MNAAddData(fps, "", "");
      }

      public void MNA_QueryKartin(String tag) {
      MNAPlatform.MNAQueryKartin(tag);
      }

      public void MNA_TransportInfo(int msgType, String msg) {
      MNAPlatform.MNATransportInfo(msgType, msg);
      }

      public void MNA_QueryPreciseKartin(long curServTime, long pvpDurationTime, String triggerDelay) {
      MNAPlatform.MNAQueryPreciseKartin(curServTime, pvpDurationTime, triggerDelay);
      }

      public void MNA_GetIpGroupDelays(String tag, String ipPortGroup, int intervalMills, int count, int pkgTimeoutMills) {
      MNAPlatform.MNAGetIpGroupDelays(tag, ipPortGroup, intervalMills, count, pkgTimeoutMills);
      }

      public void MNA_GetIpGroupDelaysForTest(String tag, String ipPortGroup, int intervalMills, int count, int pkgTimeoutMills) {
      MNAPlatform.MNAGetIpGroupDelaysForTest(tag, ipPortGroup, intervalMills, count, pkgTimeoutMills);
      }

      public void MNA_GetIpGroupDelaysUseTCP(String tag, String ipPortGroup, int intervalMills, int count, int pkgTimeoutMills) {
      MNAPlatform.MNAGetIpGroupDelaysUseTCP(tag, ipPortGroup, intervalMills, count, pkgTimeoutMills);
      }

      public void MNA_GetIpGroupDelaysForTestUseTCP(String tag, String ipPortGroup, int intervalMills, int count, int pkgTimeoutMills) {
      MNAPlatform.MNAGetIpGroupDelaysForTestUseTCP(tag, ipPortGroup, intervalMills, count, pkgTimeoutMills);
      }

      public void MNA_GetIpGroupDelaysWithBinding(String tag, String ipPortGroup, int intervalMills, int count, int pkgTimeoutMills,
                                                  int ipProto, int bindNetType) {
      MNAPlatform.MNAGetIpGroupDelaysWithBinding(tag, ipPortGroup, intervalMills, count, pkgTimeoutMills, ipProto, bindNetType);
      }

      public void MNA_PingGateway(String tag, int intervalMills, int count, int pkgTimeoutMills, boolean onlyWifi) {
      MNAPlatform.MNAPingGateway(tag, intervalMills, count, pkgTimeoutMills, onlyWifi);
      }

      public void MNA_Ping(String ip, String tag, int intervalMills, int count, int pkgTimeoutMills, boolean onlyWifi) {
      MNAPlatform.MNAPing(ip, tag, intervalMills, count, pkgTimeoutMills, onlyWifi);
      }

      public void MNA_SetPvpSpeedIp(final String speedIp, final int port) {
      MNAPlatform.MNASetPvpSpeedIp(speedIp, port);
      }

      public boolean MNA_IsAnyVPNOpen() {
      return MNAPlatform.MNAIsAnyVPNOpen();
      }

      public boolean MNA_IsHarmonyOS() {
      return MNAPlatform.MNAIsHarmonyOS();
      }

      public boolean MNA_IsAuxWifiAccelerated() {
      return MNAPlatform.MNAIsAuxWifiAccelerated();
      }

      public int MNA_GetAuxWifiSupportFlag() {
      return MNAPlatform.MNAGetAuxWifiSupportFlag();
      }

      public void MNA_SetAuxWifiUserAllow(boolean isAllow) {
      MNAPlatform.MNASetAuxWifiUserAllow(isAllow);
      }

      public void MNA_SetDualTunnelBindNetType(int bindNetType, boolean useSaveFlow) {
      MNAPlatform.MNASetDualTunnelBindNetType(bindNetType, useSaveFlow);
      }

      public void MNA_QueryConnectionInfo() {
      MNAPlatform.MNAQueryConnectionInfo();
      }

      public int MNA_GetWifiLinkSpeed() {
      return MNAPlatform.MNAGetWifiLinkSpeed();
      }

      public String MNA_GetMobileActiveSimCountInfo() {
      return MNAPlatform.MNAGetMobileActiveSimCountInfo();
      }

      public int MNA_GetNetworkType() {
      return MNAPlatform.MNAGetNetworkType();
      }

      public int MNA_GetTelephonyType() {
      return MNAPlatform.MNAGetTelephonyType();
      }

      public void MNA_EnterMapLoading() {
      MNAPlatform.MNAEnterMapLoading();
      }

      public int MNA_GetSpeedDelay() {
      return MNAPlatform.MNAGetSpeedDelay();
      }

      public int[] MNA_GetBatteryLevelAndCharging() {
      return MNAPlatform.MNAGetBatteryLevelAndCharging();
      }

    </insert>
  </gameActivityClassAdditions>

  <gameActivityOnStartAdditions>
    <insert>
      MNAPlatform.MNAGoFront();
    </insert>
  </gameActivityOnStartAdditions>

    <gameActivityOnStopAdditions>
    <insert>
      MNAPlatform.MNAGoBack();
    </insert>
  </gameActivityOnStopAdditions>

  <gameActivityOnDestroyAdditions>
    <insert>
      MNAPlatform.MNAEndSpeed("destroyCall", 0);
    </insert>
  </gameActivityOnDestroyAdditions>

  <proguardAdditions>
    <insert>
      -optimizationpasses 5                                                           # 指定代码的压缩级别
      -dontusemixedcaseclassnames                                                     # 是否使用大小写混合
      -dontpreverify                                                                  # 混淆时是否做预校验
      -dontskipnonpubliclibraryclassmembers                                           # 指定不去忽略非公共库的类成员
      -optimizations !code/simplification/arithmetic,!field/*,!class/merging/*        # 混淆时所采用的算法
      -ignorewarnings
      -verbose
      -dontusemixedcaseclassnames
      -printmapping 'proguardMapping.txt' # 指定映射文件名
      -keepattributes SourceFile,LineNumberTable # 抛出异常时保留代码行数

      # jni
      -keep class **.jni.** {*;}
      # jni相关
      -keep class com.tencent.mna.base.jni.*Jni{*;}
      -keep class com.tencent.mna.base.jni.entity.**{*;}
      -keep class com.tencent.mna.base.jni.javaapi.**{*;}
      # FIXME: 增加新外部接口时记得keep
      -keep class com.tencent.mna.GHObserver{*;}
      -keep class com.tencent.mna.MNAPlatform{*;}
      -keep class com.tencent.mna.MNAPlatformImpl{*;}
      -keep class com.tencent.mna.MNAObserver{*;}
      -keep class com.tencent.mna.NetworkObserver{*;}
      -keep class com.tencent.mna.RouterObserver{*;}
      -keep class com.tencent.mna.NetworkBindingListener{*;}
      -keep class com.tencent.mna.ConnectionInfoObserver{*;}
      -keep class com.tencent.mna.StartSpeedRet{*;}
      -keep class com.tencent.mna.KartinRet{*;}
      -keep class com.tencent.mna.MNAManager{*;}
      -keep class com.tencent.mna.TransportInfoMsgType{*;}
      -keep class com.tencent.mna.ReportChannelType{*;}
      -keep class com.tencent.mna.AuxWifiSupportFlag{*;}
      -keep class com.tencent.mna.IpGroupDelaysObserver{*;}
      # jni相关
      -keep class com.cmocmna.sdk.base.jni.*Jni{*;}
      -keep class com.cmocmna.sdk.base.jni.entity.**{*;}
      -keep class com.cmocmna.sdk.base.jni.javaapi.**{*;}
      # FIXME: 增加新外部接口时记得keep
      -keep class com.cmocmna.sdk.GHObserver{*;}
      -keep class com.cmocmna.sdk.MNAPlatform{*;}
      -keep class com.cmocmna.sdk.MNAPlatformImpl{*;}
      -keep class com.cmocmna.sdk.MNAObserver{*;}
      -keep class com.cmocmna.sdk.NetworkObserver{*;}
      -keep class com.cmocmna.sdk.RouterObserver{*;}
      -keep class com.cmocmna.sdk.NetworkBindingListener{*;}
      -keep class com.cmocmna.sdk.ConnectionInfoObserver{*;}
      -keep class com.cmocmna.sdk.StartSpeedRet{*;}
      -keep class com.cmocmna.sdk.KartinRet{*;}
      -keep class com.cmocmna.sdk.MNAManager{*;}
      -keep class com.cmocmna.sdk.TransportInfoMsgType{*;}
      -keep class com.cmocmna.sdk.ReportChannelType{*;}
      -keep class com.cmocmna.sdk.AuxWifiSupportFlag{*;}
      -keep class com.cmocmna.sdk.IpGroupDelaysObserver{*;}
      -keep class com.tencent.** {*;}
    </insert>
  </proguardAdditions>

</root>
